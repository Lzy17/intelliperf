L2 Hit Rate Improvement %: 31.792021677019868
Speedup: 1.164756288100392

Swizzling Pattern:
[[[pid_m = tl.program_id(0)
    pid_n = tl.program_id(1)

    # New swizzling pattern
    block_id = pid_m * num_blocks_n + pid_n
    xcd_stride = num_blocks // num_XCD
    new_block_id = (block_id % xcd_stride) * num_XCD + (block_id // xcd_stride) % num_XCD
    pid_m = new_block_id // num_blocks_n
    pid_n = new_block_id % num_blocks_n]]]
Full Kernel Code:
[[[#!/usr/bin/env python

import torch
import triton
import triton.language as tl
import argparse

@triton.jit
def stencil_2d_kernel(
    input_ptr, output_ptr,
    M, N,
    stride_m, stride_n,
    BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr
):
    num_XCD = 8
    num_blocks_m = (M + BLOCK_SIZE_M - 1) // BLOCK_SIZE_M
    num_blocks_n = (N + BLOCK_SIZE_N - 1) // BLOCK_SIZE_N
    num_blocks = num_blocks_m * num_blocks_n

    pid_m = tl.program_id(0)
    pid_n = tl.program_id(1)

    # New swizzling pattern
    block_id = pid_m * num_blocks_n + pid_n
    xcd_stride = num_blocks // num_XCD
    new_block_id = (block_id % xcd_stride) * num_XCD + (block_id // xcd_stride) % num_XCD
    pid_m = new_block_id // num_blocks_n
    pid_n = new_block_id % num_blocks_n

    offsets_m = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)
    offsets_n = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)
    
    input_ptrs = input_ptr + offsets_m[:, None] * stride_m + offsets_n[None, :] * stride_n
    
    mask = (offsets_m[:, None] < M) & (offsets_n[None, :] < N)
    
    center = tl.load(input_ptrs, mask=mask, other=0.0)
    
    # Boundary checks for neighbors
    up_mask = ((offsets_m - 1)[:, None] >= 0) & mask
    down_mask = ((offsets_m + 1)[:, None] < M) & mask
    left_mask = ((offsets_n - 1)[None, :] >= 0) & mask
    right_mask = ((offsets_n + 1)[None, :] < N) & mask
    
    up = tl.load(input_ptrs - stride_m, mask=up_mask, other=0.0)
    down = tl.load(input_ptrs + stride_m, mask=down_mask, other=0.0)
    left = tl.load(input_ptrs - stride_n, mask=left_mask, other=0.0)
    right = tl.load(input_ptrs + stride_n, mask=right_mask, other=0.0)

    # Simple 5-point stencil operation
    output = 0.5 * center + 0.125 * (up + down + left + right)
    
    output_ptrs = output_ptr + offsets_m[:, None] * stride_m + offsets_n[None, :] * stride_n
    tl.store(output_ptrs, output, mask=mask)

def stencil_2d(x):
    M, N = x.shape
    y = torch.empty_like(x)
    
    grid = lambda META: (
        triton.cdiv(M, META['BLOCK_SIZE_M']),
        triton.cdiv(N, META['BLOCK_SIZE_N'])
    )
    
    stencil_2d_kernel[grid](
        x, y,
        M, N,
        x.stride(0), x.stride(1),
        BLOCK_SIZE_M=32, BLOCK_SIZE_N=32
    )
    return y

def main(M=8192, N=8192):
    x = torch.randn((M, N), device='cuda', dtype=torch.float16)

    rep = 100
    
    for _ in range(10):
        y_triton = stencil_2d(x)

    torch.cuda.synchronize()
    start_time = torch.cuda.Event(enable_timing=True)
    end_time = torch.cuda.Event(enable_timing=True)

    start_time.record()
    for _ in range(rep):
        y_triton = stencil_2d(x)
    end_time.record()
    torch.cuda.synchronize()

    triton_time = start_time.elapsed_time(end_time) / rep
    print(f"Triton 2D stencil time: {triton_time:.4f} ms")

    # For verification
    # def torch_stencil(x):
    #     y = torch.nn.functional.pad(x, (1, 1, 1, 1), 'replicate')
    #     y = torch.nn.functional.avg_pool2d(y, kernel_size=3, stride=1)
    #     return y
    #
    # y_torch = torch_stencil(x)
    # assert torch.allclose(y_triton[1:-1, 1:-1], y_torch, atol=1e-2, rtol=0)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Triton 2D Stencil Benchmark")
    parser.add_argument("--M", type=int, default=8192, help="Number of rows")
    parser.add_argument("--N", type=int, default=8192, help="Number of columns")
    args = parser.parse_args()
    
    main(args.M, args.N)]]]
